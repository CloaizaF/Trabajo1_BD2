def printknapSack(W, wt, n):
	K = [[0 for w in range(W + 1)]
			for i in range(n + 1)]
			
	# Build table K[][] in bottom
	# up manner
	for i in range(n + 1):
		for w in range(W + 1):
			if i == 0 or w == 0:
				K[i][w] = 0
			elif wt[i - 1] <= w:
				K[i][w] = max(wt[i - 1]
				+ K[i - 1][w - wt[i - 1]],
							K[i - 1][w])
			else:
				K[i][w] = K[i - 1][w]

	# stores the result of Knapsack
	res = K[n][W]
	print(res)
	
	w = W
	for i in range(n, 0, -1):
		if res <= 0:
			break
		# either the result comes from the
		# top (K[i-1][w]) or from (val[i-1]
		# + K[i-1] [w-wt[i-1]]) as in Knapsack
		# table. If it comes from the latter
		# one/ it means the item is included.
		if res == K[i - 1][w]:
			continue
		else:

			# This item is included.
			print(wt[i - 1])
			
			# Since this weight is included
			# its value is deducted
			res = res - wt[i - 1]
			w = w - wt[i - 1]

# Driver code

wt = [ 1,1,1,1,1,3,3,4,4,5,6,7,8,9,10,10,10,11,11,12,13,15,17,19,20,22,29,27,30,30,34,36,38,39,41,42,45,47,50,54,58,65,67,70,74,76,83,85,89,89,94,98,110,120,120,120,120,120,120,120,120,120]
W = 1000000
n = len(wt)

printknapSack(W, wt, n)

# This code is contributed by Aryan Garg.
